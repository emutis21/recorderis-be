basePath: /api/v1
definitions:
  models.CreateDescriptionRequest:
    properties:
      index:
        type: integer
      text:
        type: string
    required:
    - text
    type: object
  swagger.CreateMemoryRequest:
    properties:
      date:
        type: string
      descriptions:
        items:
          $ref: '#/definitions/models.CreateDescriptionRequest'
        type: array
      is_public:
        type: boolean
      title:
        type: string
    required:
    - date
    - title
    type: object
  swagger.CreateUserRequest:
    properties:
      display_name:
        example: New User
        type: string
      email:
        example: new@example.com
        type: string
      password:
        example: securepassword
        type: string
      role:
        example: user
        type: string
      username:
        example: newuser
        type: string
    type: object
  swagger.ErrorResponse:
    properties:
      error:
        properties:
          detail:
            example: Email is required
            type: string
          message:
            example: Invalid input
            type: string
          type:
            example: VALIDATION
            type: string
        type: object
      message:
        example: Error message
        type: string
      success:
        example: false
        type: boolean
    type: object
  swagger.LoginRequest:
    properties:
      device_type:
        example: web
        type: string
      email:
        example: john@example.com
        type: string
      password:
        example: securepassword
        type: string
      remember_me:
        example: true
        type: boolean
    type: object
  swagger.MemoryResponse:
    properties:
      created_at:
        example: "2024-04-01T10:30:00Z"
        type: string
      date:
        example: "2024-07-15T00:00:00Z"
        type: string
      id:
        example: abc123def456
        type: string
      is_public:
        example: false
        type: boolean
      title:
        example: Summer Vacation 2024
        type: string
      updated_at:
        example: "2024-04-02T15:45:00Z"
        type: string
    type: object
  swagger.RegisterRequest:
    properties:
      device_type:
        example: web
        type: string
      display_name:
        example: John Doe
        type: string
      email:
        example: john@example.com
        type: string
      password:
        example: securepassword
        type: string
      username:
        example: johndoe
        type: string
    type: object
  swagger.SuccessResponse:
    properties:
      data: {}
      message:
        example: Operación completada con éxito
        type: string
      success:
        example: true
        type: boolean
    type: object
  swagger.TokenResponse:
    properties:
      access_token:
        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        type: string
      expires_in:
        example: 900
        type: integer
      refresh_token:
        example: abc123def456
        type: string
      token_type:
        example: Bearer
        type: string
    type: object
  swagger.UpdateMemoryRequest:
    properties:
      date:
        example: "2024-07-20"
        type: string
      is_public:
        example: true
        type: boolean
      title:
        example: Updated Vacation Title
        type: string
    type: object
  swagger.UpdateUserRequest:
    properties:
      display_name:
        example: Updated Name
        type: string
      email:
        example: updated@example.com
        type: string
      password:
        example: newsecurepassword
        type: string
    type: object
  swagger.UserResponse:
    properties:
      display_name:
        example: John Doe
        type: string
      email:
        example: john@example.com
        type: string
      id:
        example: "123"
        type: string
      role:
        example: user
        type: string
      username:
        example: johndoe
        type: string
    type: object
host: localhost:4000
info:
  contact:
    email: your-email@domain.com
    name: API Support
  description: API for the Recorderis memories application
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
  termsOfService: http://swagger.io/terms/
  title: Recorderis API
  version: 0.1.0
paths:
  /auth/login:
    post:
      consumes:
      - application/json
      description: Authenticates a user and returns a JWT token
      parameters:
      - description: Login credentials
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/swagger.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/swagger.TokenResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/swagger.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/swagger.ErrorResponse'
      summary: User login
      tags:
      - auth
  /auth/refresh:
    post:
      consumes:
      - application/json
      description: Get a new access token using a refresh token
      parameters:
      - description: Refresh Token
        in: header
        name: X-Refresh-Token
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/swagger.TokenResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/swagger.ErrorResponse'
      summary: Refresh token
      tags:
      - auth
  /auth/register:
    post:
      consumes:
      - application/json
      description: Creates a new user account
      parameters:
      - description: Registration data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/swagger.RegisterRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/swagger.TokenResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/swagger.ErrorResponse'
      summary: Register a new user
      tags:
      - auth
  /secure/auth/logout:
    post:
      consumes:
      - application/json
      description: Invalidates user token and ends the session
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/swagger.SuccessResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/swagger.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Logout
      tags:
      - auth
  /secure/memories:
    get:
      consumes:
      - application/json
      description: Gets all memories for the authenticated user
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/swagger.MemoryResponse'
            type: array
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/swagger.ErrorResponse'
      security:
      - BearerAuth: []
      summary: List memories
      tags:
      - memories
    post:
      consumes:
      - application/json
      description: Creates a new memory for the authenticated user
      parameters:
      - description: Memory data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/swagger.CreateMemoryRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/swagger.MemoryResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/swagger.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/swagger.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Create memory
      tags:
      - memories
  /secure/memories/{id}:
    delete:
      consumes:
      - application/json
      description: Permanently removes a memory
      parameters:
      - description: Memory ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/swagger.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/swagger.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Delete memory
      tags:
      - memories
    get:
      consumes:
      - application/json
      description: Returns information for a specific memory
      parameters:
      - description: Memory ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/swagger.MemoryResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/swagger.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/swagger.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get memory by ID
      tags:
      - memories
    put:
      consumes:
      - application/json
      description: Updates information for an existing memory
      parameters:
      - description: Memory ID
        in: path
        name: id
        required: true
        type: string
      - description: Data to update
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/swagger.UpdateMemoryRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/swagger.MemoryResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/swagger.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/swagger.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/swagger.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Update memory
      tags:
      - memories
  /secure/users:
    get:
      consumes:
      - application/json
      description: Gets a list of all users
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/swagger.UserResponse'
            type: array
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/swagger.ErrorResponse'
      security:
      - BearerAuth: []
      summary: List users
      tags:
      - users
    post:
      consumes:
      - application/json
      description: Creates a new user in the system
      parameters:
      - description: User data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/swagger.CreateUserRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/swagger.UserResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/swagger.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/swagger.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Create user
      tags:
      - users
  /secure/users/{id}:
    delete:
      consumes:
      - application/json
      description: Permanently removes a user from the system
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/swagger.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/swagger.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Delete user
      tags:
      - users
    put:
      consumes:
      - application/json
      description: Updates information for an existing user
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      - description: Data to update
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/swagger.UpdateUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/swagger.UserResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/swagger.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/swagger.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/swagger.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Update user
      tags:
      - users
  /secure/users/me:
    get:
      consumes:
      - application/json
      description: Returns information for the authenticated user
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/swagger.UserResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/swagger.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get current user profile
      tags:
      - users
  /users/{id}:
    get:
      consumes:
      - application/json
      description: Returns information for a specific user
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/swagger.UserResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/swagger.ErrorResponse'
      summary: Get user by ID
      tags:
      - users
securityDefinitions:
  BearerAuth:
    description: Type "Bearer" followed by a space and the JWT token.
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
